
(* Proof of Bellman-Ford algorithm *)

theory Graph

  use export int.Int
  use export set.Fset

  type vertex
  constant vertices : set vertex
  constant edges: set (vertex, vertex)
  constant s : vertex
  function weight vertex vertex : int

  axiom s_in_graph: mem s vertices

  axiom edges_def:
    forall x y: vertex, w: int. mem (x, y) edges ->
    (mem x vertices /\ mem y vertices)

  inductive path (v1 v2: vertex) (n: int) (d: int) =
    | path_empty:
        forall v: vertex. path v v 0 0
    | path_succ:
        forall v1 v2 v3: vertex, n d: int. path v1 v2 n d ->
        mem (v2, v3) edges -> path v1 v3 (n + (weight v2 v3)) (d + 1)

  predicate shortest_path (v1 v2: vertex) (n: int) =
    (exists d: int. path v1 v2 n d) /\
    (forall m d: int. m < n -> not (path v1 v2 m d))

  predicate no_path (v1 v2: vertex) =
    forall n d: int. not (path v1 v2 n d)

  lemma path_depth_nonneg:
    forall v1 v2: vertex, n d: int.
    path v1 v2 n d -> d >= 0

  lemma path_depth_source:
    forall v1 v2: vertex, n: int.
    path v1 v2 n 0 -> v1 = v2

  predicate negcycle =
    exists v: vertex. mem v vertices /\
    exists n d: int. n < 0 /\ 0 < d <= cardinal vertices /\ path v v n d

end 

theory Distance

  use import int.Int

  type dist = Finite int | Infinite

  function (++) (x: dist) (y: dist) : dist =
    match x with
      | Infinite -> Infinite
      | Finite x ->
        match y with
          | Infinite -> Infinite
          | Finite y -> Finite (x + y)
        end
    end

  predicate (<<) (x y: dist) =
    match x with
      | Infinite -> false
      | Finite x ->
        match y with
          | Infinite -> true
          | Finite y -> x < y
        end
    end

  predicate ge (x y: dist) =
    match x with
      | Infinite -> true
      | Finite x ->
        match y with
          | Infinite -> false
          | Finite y -> x >= y
        end
    end

  clone export comparison.MinMax with type t = dist, predicate ge = ge

end

theory FSetTake

  use export set.Fset

  function take (s:set 'a) : 'a

  axiom take_def:
    forall x : set 'a. not (is_empty x) ->
    mem (take x) x

end

(* a bag is simply a reference containing a finite set *)
module Bag

  use export FSetTake
  use export module ref.Ref

  type bag 'a = ref (set 'a)

  let is_empty (b: bag 'a) =
    {} is_empty !b { result=True <-> is_empty !b }

  (*
  val push (x: 'a) (b: bag 'a) :
    {} unit writes b { !b = add x (old !b) }
  *)

  let pop (b: bag 'a) =
    { not (is_empty !b) }
    let x = take !b in
    b := remove x !b;
    x
    { mem result (old !b) /\ !b = remove result (old !b) }

end

module BellmanFord

  use import int.MinMax
  use import map.Map
  use import module ref.Ref
  use import Graph
  use import Distance
  use module Bag

  type distmap = map vertex dist

  function initialize_single_source (s: vertex) : distmap =
    (const Infinite)[s <- Finite 0]

  predicate paths (m: distmap) (pass: int) =
    forall v: vertex. mem v vertices ->
    match m[v] with
      | Finite n -> exists d: int. 0 <= d < pass -> path s v n d
      | Infinite -> forall n d: int. 0 <= d < pass -> not (path s v n d)
    end

  let relax (m: ref distmap) (u: vertex) (v: vertex) (pass: int) =
    { exists w: int. mem (u, v) edges /\ paths !m pass }
    let d = !m[u] ++ Finite (weight u v) in
    if d << !m[v] then m := !m[v <- d]
    { paths !m pass /\
      forall x: vertex. (x <> v -> get !m x = get (old !m) x) }

  exception NegativeCycle (* list vertex *)

  let bellman_ford () =
    { }
    let m = ref (initialize_single_source s) in
    assert { paths !m 1 };

    for i = 1 to cardinal vertices - 1 do
      invariant { paths !m i }

      let e = ref edges in
      while not (Bag.is_empty e) do
        invariant { subset !e edges /\ paths !m i }
        variant { cardinal !e }

        let (u, v) = Bag.pop e in
        relax m u v i
      done
    done;

    let e = ref edges in
    while not (Bag.is_empty e) do
      variant { cardinal !e }

      let (u, v) = Bag.pop e in

      if (get !m v) <<
        ((get !m u) ++ (Finite (weight u v))) then
        raise NegativeCycle
    done;

    !m

    { paths result (cardinal vertices) }
    | NegativeCycle -> { }

end

(*
Local Variables:
compile-command: "why3ide bf.mlw"
End:
*)
