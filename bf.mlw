
(* Proof of Bellman-Ford algorithm *)

theory Graph

  use export int.Int
  use export set.Fset

  type vertex
  constant vertices : set vertex
  constant edges: set (vertex, vertex)
  constant s : vertex
  function weight vertex vertex : int

  axiom s_in_graph: mem s vertices
  lemma vertices_cardinal_pos: cardinal vertices > 0

  axiom edges_def:
    forall x y: vertex. mem (x, y) edges ->
    (x <> y /\ mem x vertices /\ mem y vertices)

  inductive path (v1 v2: vertex) (n d: int) =
    | path_empty:
        forall v: vertex. path v v 0 0
    | path_succ:
        forall v1 v2: vertex, n d: int. path v1 v2 n d ->
        forall v3: vertex. mem (v2, v3) edges ->
        path v1 v3 (n + (weight v2 v3)) (d + 1)

  lemma path_depth_nonneg:
    forall v1 v2: vertex, n d: int.
    path v1 v2 n d -> d >= 0

  lemma path_in_vertices:
     forall v1 v2: vertex, n d: int.
     mem v1 vertices -> path v1 v2 n d -> mem v2 vertices

  lemma path_depth_empty:
    forall v1 v2: vertex, n d: int.
    path v1 v2 n 0 -> v1 = v2 /\ n = 0

  lemma path_pred_existence:
    forall v1 v3: vertex, n d: int. d >= 0 -> path v1 v3 n (d + 1) ->
    exists v2: vertex. mem (v2, v3) edges /\
    path v1 v2 (n - (weight v2 v3)) d

  predicate shortest_path_depth (v1 v2: vertex) (n d: int) =
    (exists d': int. 0 <= d' < d /\ path v1 v2 n d') /\
    (forall d': int. 0 <= d' < d ->
      forall n': int. path v1 v2 n' d' -> n <= n')

  predicate shortest_path (v1 v2: vertex) (n d: int) =
    (path v1 v2 n d) /\
    (forall n' d': int. n' < n -> not (path v1 v2 n' d'))

  lemma shortest_path_empty:
    forall v: vertex. mem v vertices ->
    (forall n d: int. n < 0 -> not (path v v n d)) ->
    shortest_path v v 0 0

(*
  I don't think this can be proved right now.
  lemma shortest_path_pred:
    forall v: vertex. mem v vertices ->
    forall n d: int. shortest_path s v n d ->
    exists u: vertex. mem (u, v) edges /\
    shortest_path s u (n - weight u v) (d - 1)

  lemma shortest_path_max_depth:
    forall d: int. d < 0 \/ d >= cardinal vertices ->
    forall u v: vertex, n: int. not shortest_path u v n d
*)

  predicate no_path (v1 v2: vertex) =
    forall n d: int. not (path v1 v2 n d)

  lemma no_path_not_same:
    forall v: vertex. not (no_path v v)

  lemma path_trans:
    forall v1 v2 v3: vertex, n1 n2 d1 d2: int.
    path v1 v2 n1 d1 -> path v2 v3 n2 d2 ->
    path v1 v3 (n1 + n2) (d1 + d2)

  lemma reach_less_than_n:
    forall v1 v2: vertex. mem v1 vertices ->
    forall d n: int. path v1 v2 n d ->
    exists d' n': int. d' < cardinal vertices /\ path v1 v2 n' d'

  lemma reach_most_n:
    forall v1 v2: vertex.
    mem v1 vertices /\ mem v2 vertices ->
    (forall n d: int. 0 <= d < cardinal vertices ->
      not (path v1 v2 n d)) ->
    no_path v1 v2

  predicate negcycle =
    exists v: vertex. mem v vertices /\
    exists n d: int. n < 0 /\ path v v n d

  (*** Later we will eliminate this assumption ***)
  axiom ignore_negcycle: negcycle -> false

  (* Shortest path distance is uniquely determined if exists. *)
  lemma shortest_path_unique_distance:
    forall v: vertex, n d: int.
    shortest_path s v n d ->
    forall n' d': int. n <> n' -> not (shortest_path s v n' d')

  (* Needs to prove completeness *)
  lemma no_path_xor_shortest_path_exists:
    not negcycle -> forall v: vertex. mem v vertices ->
    (no_path s v <-> not (exists n d: int. shortest_path s v n d))

end

theory Path

  use import list.List
  use import list.Length
  use list.Mem
  use import list.Append
  use import list.Distinct
  use export Graph

  inductive pathl (v: vertex) (l: list vertex) =
    | path_list_empty:
        forall v: vertex. pathl v Nil
    | pathl_one:
        forall v1: vertex, l: list vertex. pathl v1 Nil  ->
        forall v2: vertex. mem (v1, v2) edges ->
        pathl v1 (Cons v2 Nil)
    | pathl_succ:
        forall v1 v2: vertex, l: list vertex. pathl v1 (Cons v2 l) ->
        forall v3: vertex. mem (v2, v3) edges ->
        pathl v1 (Cons v3 (Cons v2 l))

  function sum (v: vertex) (l: list vertex) : int =
    match l with
    | Nil -> 0
    | Cons v2 rest ->
      match rest with
      | Nil -> weight v v2
      | Cons v1 _ -> (weight v1 v2) + (sum v rest)
      end
    end

  lemma path_pathl_1:
    forall v: vertex, n d: int. path v v 0 0 -> pathl v Nil

  lemma path_pathl_2:
    forall v1 v2: vertex, n d: int. d <> 0 -> path v1 v2 n d ->
    exists l: list vertex. length l = d /\
      pathl v1 (Cons v2 l) /\ sum v1 (Cons v2 l) = n

  lemma pathl_path:
    forall v: vertex, l: list vertex. pathl v l ->
    match l with
    | Nil -> path v v 0 0
    | Cons x r -> path v x (sum v l) (length l)
    end

  predicate no_repeat (l: list 'a) =
    match l with
    | Nil -> true
    | Cons x r -> not (Mem.mem x r) /\ no_repeat r
    end

  lemma path_merge:
    forall v1 v2 v3: vertex, l1 l2: list vertex.
    pathl v1 (Cons v2 l1) /\ pathl v2 l2 ->
    pathl v1 (l2 ++ Cons v2 l1)

  lemma path_split:
    forall l1 l2: list vertex, v1 v2 v3: vertex.
    pathl v1 (l1 ++ Cons v3 l2) -> pathl v1 (Cons v3 l2) /\ pathl v3 l1

  lemma no_repeat_or_loop:
    forall l: list vertex. no_repeat l \/
    exists v: vertex, l1 l2 l3: list vertex.
    l = l1 ++ (Cons v (l2 ++ Cons v l3))

  lemma no_rep:
    forall v1 v2: vertex, l: list vertex. pathl v1 (Cons v2 l) ->
    exists l': list vertex. pathl v1 (Cons v2 l') /\ no_repeat l'

  lemma path_longer_n:
    forall v: vertex, l: list vertex.
    pathl v l -> length l > cardinal vertices ->
    not (no_repeat l)


(*
  inductive simple_path (s: vertex) (l: list vertex) =
    | simple_zero:
        forall v: vertex. simple_path v Nil
    | simple_succ:
        forall s v1: vertex, l: list vertex. simple_path s (Cons v1 l) ->
        forall v2: vertex. mem (v1, v2) edges -> s <> v2 ->
        not (Mem.mem v2 l) -> simple_path s (Cons v2 (Cons v1 l))


  lemma simple_path_distinct:
    forall s: vertex, l: list vertex. simple_path s l ->
    distinct l /\ not Mem.mem s l

  lemma simple_path_less_than_n:
    forall s: vertex, l: list vertex. simple_path s l ->
    length l < cardinal vertices

  lemma simple_to_path:
    forall s: vertex, l: list vertex. simple_path s l -> pathl s l

  lemma path_to_simple_empty:
    forall s v: vertex, l: list vertex. pathl s (Cons s l) ->
    simple_path s (Cons s Nil)

  lemma path_to_simple_succ:
    forall s v: vertex, l: list vertex. pathl s (Cons v l) ->
    exists l': list vertex. simple_path s (Cons v l')
*)
end

theory Distance

  use import int.Int

  type dist = Finite int | Infinite

  function (++) (x: dist) (y: dist) : dist =
    match x with
      | Infinite -> Infinite
      | Finite x ->
        match y with
          | Infinite -> Infinite
          | Finite y -> Finite (x + y)
        end
    end

  predicate (<<) (x y: dist) =
    match x with
      | Infinite -> false
      | Finite x ->
        match y with
          | Infinite -> true
          | Finite y -> x < y
        end
    end

  predicate (>>=) (x y: dist) =
    match x with
      | Infinite -> true
      | Finite x ->
        match y with
          | Infinite -> false
          | Finite y -> x >= y
        end
    end

  clone export comparison.MinMax with type t = dist, predicate ge = (>>=)

end

theory FSetEx

  use export set.Fset

  function take (s:set 'a) : 'a

  axiom take_def:
    forall x : set 'a. not (is_empty x) ->
    mem (take x) x

  lemma set_empty:
    forall a: set 'a. is_empty a <-> a = empty

  lemma set_union_exchange:
    forall a b: set 'a. union a b = union b a

  lemma set_inter_exchange:
    forall a b: set 'a. inter a b = inter b a

  lemma set_inter_choice:
    forall a b: set 'a, e: 'a. inter a b = empty ->
    mem e a -> not (mem e b)

  lemma set_preserve_union:
    forall a b: set 'a, e: 'a. mem e a ->
    union (remove e a) (add e b) = union a b

  lemma set_preserve_inter:
    forall a b: set 'a, e: 'a. mem e a /\ not (mem e b) ->
    inter (remove e a) (add e b) = inter a b

  lemma set_empty_union:
    forall a: set 'a. union a empty = a

  lemma set_empty_inter:
    forall a: set 'a. inter a empty = empty

end

(* a bag is simply a reference containing a finite set *)
module Bag

  use export FSetEx
  use export module ref.Ref

  type bag 'a = ref (set 'a)

  let is_empty (b: bag 'a) =
    {} is_empty !b { result=True <-> is_empty !b }

  (*
  val push (x: 'a) (b: bag 'a) :
    {} unit writes b { !b = add x (old !b) }
  *)

  let pop (b: bag 'a) =
    { not (is_empty !b) }
    let x = take !b in
    b := remove x !b;
    x
    { mem result (old !b) /\ !b = remove result (old !b) }

end

module BellmanFord

  use import int.MinMax
  use import map.Map
  use import module ref.Ref
  use import Graph
  use import Distance
  use FSetEx
  use module Bag

  type distmap = map vertex dist

  function initialize_single_source (s: vertex) : distmap =
    (const Infinite)[s <- Finite 0]

  predicate path_ends_with (v1 v2: vertex) (n d: int)
              (via: set (vertex, vertex)) =
    exists u: vertex. mem (u, v2) via /\
    path v1 u (n - weight u v2) (d - 1)

  (* [inv1 m pass via] means that we already performed [pass-1] steps
     of the main loop, and, in step [pass], we already processed edges
     in [via] *)
  predicate inv1 (m: distmap) (pass: int) (via: set (vertex, vertex)) =
    forall v: vertex. mem v vertices ->
    match m[v] with
      | Finite n ->
        shortest_path_depth s v n pass /\
        (forall n': int. path_ends_with s v n' pass via -> n <= n')
      | Infinite ->
        (forall d: int. 0 <= d < pass ->
          forall n: int. not (path s v n d)) /\
        (forall u: vertex. mem (u, v) via ->
          forall d: int. 0 <= d < pass ->
          forall n: int. not (path s u n d))
    end

  predicate inv2 (m: distmap) (via: set (vertex, vertex)) =
    forall v: vertex. mem v vertices ->
    match m[v] with
      | Finite n ->
        forall n' d': int. path_ends_with s v n' d' via -> n <= n'
      | Infinite -> true
    end

  lemma inv1_next:
    forall m: distmap, d: int. 0 <= d < cardinal vertices ->
    inv1 m d edges -> inv1 m (d + 1) empty

  lemma inv2_shortest:
    forall v: vertex. mem v vertices -> forall n: int.
    (exists d: int. 0 <= d < cardinal vertices /\ path s v n d) /\
    (forall d': int. 0 <= d' < cardinal vertices ->
      forall n': int. path s v n' d' -> n <= n') /\
    (forall n' d': int. path_ends_with s v n' d' edges -> n <= n') ->
    exists d: int. shortest_path s v n d

  let relax (m: ref distmap) (u v: vertex) (pass: int)
            (via: set (vertex, vertex)) =
    { mem (u, v) edges /\ not (mem (u, v) via) /\ inv1 !m pass via }
    let n = !m[u] ++ Finite (weight u v) in
    if n << !m[v] then m := !m[v <- n]
    { inv1 !m pass (add (u, v) via) }

  exception NegativeCycle (* list vertex *)

  let bellman_ford () =
    { }
    let m = ref (initialize_single_source s) in

    for i = 1 to cardinal vertices - 1 do
      invariant { inv1 !m i empty }

      let es = ref edges in
      let es_co = ref empty in
      while not (Bag.is_empty es) do
        invariant { inv1 !m i !es_co /\
          union !es !es_co == edges /\ inter !es !es_co == empty }
        variant { cardinal !es }

        let (u, v) = Bag.pop es in
        relax m u v i !es_co;
        es_co := add (u, v) !es_co
      done
    done;

    let es = ref edges in
    let es_co = ref empty in
    while not (Bag.is_empty es) do
      invariant { inv2 !m !es_co /\
          union !es !es_co == edges /\ inter !es !es_co == empty }
      variant { cardinal !es }

      let (u, v) = Bag.pop es in

      if (!m[u] ++ (Finite (weight u v))) << (!m[v]) then begin
        assert {
          match !m[v] with
          | Infinite -> false
          | Finite dv ->
            match !m[u] with
            | Infinite -> false
            | Finite du ->
              shortest_path_depth s u du (cardinal vertices) /\
              shortest_path_depth s v dv (cardinal vertices) /\
              not (shortest_path_depth s v dv (cardinal vertices + 1))
            end
          end
        };
        raise NegativeCycle end
      else ();
      es_co := add (u, v) !es_co
    done;

    assert { inv1 !m (cardinal vertices) empty };
    assert { inv2 !m edges };

    !m

    { forall v: vertex. mem v vertices ->
      match result[v] with
        | Finite n -> exists d: int. shortest_path s v n d 
        | Infinite -> no_path s v
      end }
    | NegativeCycle ->
    { exists v: vertex. mem v vertices /\
      exists n d: int. n < 0 /\ path v v n d }
end

(*
Local Variables:
compile-command: "why3ide bf.mlw"
End:
*)
